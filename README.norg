* Norg-rs

norg AST parser & converter that uses tree-sitter-norg internally

#warn
> This version of parser uses unofficial norg spec

note about macro system:

- all macros all universally called "tag" now. A term "macro" is left to be used for future in-parsing macro expansion system
- every tags will be expanded to `Vec<Self>`.
- expanded tag contents can include tags. there will be recursion limit for this

** Exporting:

~ parse whole document as AST
~ walk through AST and run `neorg/export/block`. `neorg/export/block` will run `((block :export) target ctx)` for `Block::Embed` types.

@code
Text -(rust)-> Vec<Block> -(janet)-> Other spec
@end

** Usage

> Not possible right now. This is a plan.

- embed `stdlib.janet` in your project
- override some export logics in janet
- run `(norg/export lang blocks ctx)`

** TODOs

- (x) marshal janet to an image and provide api to embed in rust binary
- (x) pass janet result to rust
- (x) test janet exporter as single rust binary
- (x) method to override the existing export logic (not adding new one like tags)
--- (x) write proper /neorg environment/ in janet
----- (x) make `stdlib.janet` extendable.
------- (x) how to export anchors? They should be known before exporting
>>>>>>>>> use `ctx` to store all those values. `(neorg/parse)` is responsible to
          handle multiple anchors
----- (x) `neorg.janet` which imports `stdlib` and defines application-specific apis
----- (x) `neorg.janet` is the /neorg environemnt/ we need.
--- (x) compile the /neorg environment/ to image. This is a marshalled table that
    contains all required methods like `norg/export/doc` and all other stuffs.
    This image can be either embed to binary code or load from `jimage` file.
--- (x) load environment from image
--- (x) override some user-defined tags
--- (x) run `(neorg/export/doc :html ast)`
>>>>> Each files will load separate environment to separate in-file tag definitions.
- ( ) api to resolve links
- (x) embed `stdlib.janet` into rust
- (x) proper univeral rust type for attributes
-- (x) change inlines
-- (x) change blocks
- (x) implement carryover tags & carryover attributes
- (x) package as rust crate
- ( ) change `{:kind kind ...}` to `[kind ...]`
